Ticket cache exists.


$ java -jar target/benchmarks.jar -f 1
WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access by org.openjdk.jmh.util.Utils (file:/home/sgehwolf/Documents/openjdk/workspaces/jmh-benchmarks/kerb-ticket-benchmark/target/benchmarks.jar) to method java.io.Console.encoding()
WARNING: Please consider reporting this to the maintainers of org.openjdk.jmh.util.Utils
WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
WARNING: All illegal access operations will be denied in a future release
# JMH version: 1.33
# VM version: JDK 11.0.13, OpenJDK 64-Bit Server VM, 11.0.13+8
# VM invoker: /usr/lib/jvm/java-11-openjdk-11.0.13.0.8-2.fc34.x86_64/bin/java
# VM options: <none>
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.jerboaa.KrbTicketBenchmark.baseLine

# Run progress: 0.00% complete, ETA 00:05:00
# Fork: 1 of 1
# Warmup Iteration   1: 0.003 us/op
# Warmup Iteration   2: 0.003 us/op
# Warmup Iteration   3: 0.002 us/op
# Warmup Iteration   4: 0.002 us/op
# Warmup Iteration   5: 0.002 us/op
Iteration   1: 0.002 us/op
Iteration   2: 0.002 us/op
Iteration   3: 0.002 us/op
Iteration   4: 0.002 us/op
Iteration   5: 0.002 us/op


Result "org.jerboaa.KrbTicketBenchmark.baseLine":
  0.002 ±(99.9%) 0.001 us/op [Average]
  (min, avg, max) = (0.002, 0.002, 0.002), stdev = 0.001
  CI (99.9%): [0.001, 0.003] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 11.0.13, OpenJDK 64-Bit Server VM, 11.0.13+8
# VM invoker: /usr/lib/jvm/java-11-openjdk-11.0.13.0.8-2.fc34.x86_64/bin/java
# VM options: <none>
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.jerboaa.KrbTicketBenchmark.internalJDKApi

# Run progress: 33.33% complete, ETA 00:03:20
# Fork: 1 of 1
# Warmup Iteration   1: 20.300 us/op
# Warmup Iteration   2: 19.074 us/op
# Warmup Iteration   3: 18.693 us/op
# Warmup Iteration   4: 18.433 us/op
# Warmup Iteration   5: 18.458 us/op
Iteration   1: 18.469 us/op
Iteration   2: 18.496 us/op
Iteration   3: 18.458 us/op
Iteration   4: 18.500 us/op
Iteration   5: 18.569 us/op


Result "org.jerboaa.KrbTicketBenchmark.internalJDKApi":
  18.498 ±(99.9%) 0.168 us/op [Average]
  (min, avg, max) = (18.458, 18.498, 18.569), stdev = 0.044
  CI (99.9%): [18.331, 18.666] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 11.0.13, OpenJDK 64-Bit Server VM, 11.0.13+8
# VM invoker: /usr/lib/jvm/java-11-openjdk-11.0.13.0.8-2.fc34.x86_64/bin/java
# VM options: <none>
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.jerboaa.KrbTicketBenchmark.jdk17CompatibleApi

# Run progress: 66.67% complete, ETA 00:01:40
# Fork: 1 of 1
# Warmup Iteration   1: 28.933 us/op
# Warmup Iteration   2: 26.174 us/op
# Warmup Iteration   3: 26.355 us/op
# Warmup Iteration   4: 26.305 us/op
# Warmup Iteration   5: 26.244 us/op
Iteration   1: 26.223 us/op
Iteration   2: 26.319 us/op
Iteration   3: 26.131 us/op
Iteration   4: 26.210 us/op
Iteration   5: 26.194 us/op


Result "org.jerboaa.KrbTicketBenchmark.jdk17CompatibleApi":
  26.215 ±(99.9%) 0.261 us/op [Average]
  (min, avg, max) = (26.131, 26.215, 26.319), stdev = 0.068
  CI (99.9%): [25.955, 26.476] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 11.0.13, OpenJDK 64-Bit Server VM, 11.0.13+8
# VM invoker: /usr/lib/jvm/java-11-openjdk-11.0.13.0.8-2.fc34.x86_64/bin/java
# VM options: <none>
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: <none>
# Measurement: 1 iterations, single-shot each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: org.jerboaa.KrbTicketBenchmark.baseLine

# Run progress: 100.00% complete, ETA 00:00:00
# Fork: 1 of 1
Iteration   1: 6.609 us/op



# JMH version: 1.33
# VM version: JDK 11.0.13, OpenJDK 64-Bit Server VM, 11.0.13+8
# VM invoker: /usr/lib/jvm/java-11-openjdk-11.0.13.0.8-2.fc34.x86_64/bin/java
# VM options: <none>
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: <none>
# Measurement: 1 iterations, single-shot each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: org.jerboaa.KrbTicketBenchmark.internalJDKApi

# Run progress: 100.00% complete, ETA 00:00:00
# Fork: 1 of 1
Iteration   1: 81793.808 us/op



# JMH version: 1.33
# VM version: JDK 11.0.13, OpenJDK 64-Bit Server VM, 11.0.13+8
# VM invoker: /usr/lib/jvm/java-11-openjdk-11.0.13.0.8-2.fc34.x86_64/bin/java
# VM options: <none>
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: <none>
# Measurement: 1 iterations, single-shot each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: org.jerboaa.KrbTicketBenchmark.jdk17CompatibleApi

# Run progress: 100.00% complete, ETA 00:00:00
# Fork: 1 of 1
Iteration   1: 94146.616 us/op



# Run complete. Total time: 00:05:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                              Mode  Cnt      Score   Error  Units
KrbTicketBenchmark.baseLine            avgt    5      0.002 ± 0.001  us/op
KrbTicketBenchmark.internalJDKApi      avgt    5     18.498 ± 0.168  us/op
KrbTicketBenchmark.jdk17CompatibleApi  avgt    5     26.215 ± 0.261  us/op
KrbTicketBenchmark.baseLine              ss           6.609          us/op
KrbTicketBenchmark.internalJDKApi        ss       81793.808          us/op
KrbTicketBenchmark.jdk17CompatibleApi    ss       94146.616          us/op

Ticket not existing:

$ java -jar target/benchmarks.jar -f 1
WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access by org.openjdk.jmh.util.Utils (file:/home/sgehwolf/Documents/openjdk/workspaces/jmh-benchmarks/kerb-ticket-benchmark/target/benchmarks.jar) to method java.io.Console.encoding()
WARNING: Please consider reporting this to the maintainers of org.openjdk.jmh.util.Utils
WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
WARNING: All illegal access operations will be denied in a future release
# JMH version: 1.33
# VM version: JDK 11.0.13, OpenJDK 64-Bit Server VM, 11.0.13+8
# VM invoker: /usr/lib/jvm/java-11-openjdk-11.0.13.0.8-2.fc34.x86_64/bin/java
# VM options: <none>
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.jerboaa.KrbTicketBenchmark.baseLine

# Run progress: 0.00% complete, ETA 00:05:00
# Fork: 1 of 1
# Warmup Iteration   1: 0.003 us/op
# Warmup Iteration   2: 0.003 us/op
# Warmup Iteration   3: 0.002 us/op
# Warmup Iteration   4: 0.002 us/op
# Warmup Iteration   5: 0.002 us/op
Iteration   1: 0.002 us/op
Iteration   2: 0.002 us/op
Iteration   3: 0.002 us/op
Iteration   4: 0.002 us/op
Iteration   5: 0.002 us/op


Result "org.jerboaa.KrbTicketBenchmark.baseLine":
  0.002 ±(99.9%) 0.001 us/op [Average]
  (min, avg, max) = (0.002, 0.002, 0.002), stdev = 0.001
  CI (99.9%): [0.001, 0.003] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 11.0.13, OpenJDK 64-Bit Server VM, 11.0.13+8
# VM invoker: /usr/lib/jvm/java-11-openjdk-11.0.13.0.8-2.fc34.x86_64/bin/java
# VM options: <none>
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.jerboaa.KrbTicketBenchmark.internalJDKApi

# Run progress: 33.33% complete, ETA 00:03:20
# Fork: 1 of 1
# Warmup Iteration   1: 2.812 us/op
# Warmup Iteration   2: 2.617 us/op
# Warmup Iteration   3: 2.675 us/op
# Warmup Iteration   4: 2.671 us/op
# Warmup Iteration   5: 2.682 us/op
Iteration   1: 2.837 us/op
Iteration   2: 2.871 us/op
Iteration   3: 2.627 us/op
Iteration   4: 2.509 us/op
Iteration   5: 2.657 us/op


Result "org.jerboaa.KrbTicketBenchmark.internalJDKApi":
  2.700 ±(99.9%) 0.583 us/op [Average]
  (min, avg, max) = (2.509, 2.700, 2.871), stdev = 0.151
  CI (99.9%): [2.118, 3.283] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 11.0.13, OpenJDK 64-Bit Server VM, 11.0.13+8
# VM invoker: /usr/lib/jvm/java-11-openjdk-11.0.13.0.8-2.fc34.x86_64/bin/java
# VM options: <none>
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.jerboaa.KrbTicketBenchmark.jdk17CompatibleApi

# Run progress: 66.67% complete, ETA 00:01:40
# Fork: 1 of 1
# Warmup Iteration   1: 24.027 us/op
# Warmup Iteration   2: 22.610 us/op
# Warmup Iteration   3: 24.821 us/op
# Warmup Iteration   4: 22.038 us/op
# Warmup Iteration   5: 22.156 us/op
Iteration   1: 22.224 us/op
Iteration   2: 22.228 us/op
Iteration   3: 22.290 us/op
Iteration   4: 22.638 us/op
Iteration   5: 22.438 us/op


Result "org.jerboaa.KrbTicketBenchmark.jdk17CompatibleApi":
  22.364 ±(99.9%) 0.679 us/op [Average]
  (min, avg, max) = (22.224, 22.364, 22.638), stdev = 0.176
  CI (99.9%): [21.685, 23.042] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 11.0.13, OpenJDK 64-Bit Server VM, 11.0.13+8
# VM invoker: /usr/lib/jvm/java-11-openjdk-11.0.13.0.8-2.fc34.x86_64/bin/java
# VM options: <none>
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: <none>
# Measurement: 1 iterations, single-shot each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: org.jerboaa.KrbTicketBenchmark.baseLine

# Run progress: 100.00% complete, ETA 00:00:00
# Fork: 1 of 1
Iteration   1: 7.826 us/op



# JMH version: 1.33
# VM version: JDK 11.0.13, OpenJDK 64-Bit Server VM, 11.0.13+8
# VM invoker: /usr/lib/jvm/java-11-openjdk-11.0.13.0.8-2.fc34.x86_64/bin/java
# VM options: <none>
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: <none>
# Measurement: 1 iterations, single-shot each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: org.jerboaa.KrbTicketBenchmark.internalJDKApi

# Run progress: 100.00% complete, ETA 00:00:00
# Fork: 1 of 1
Iteration   1: 26258.217 us/op



# JMH version: 1.33
# VM version: JDK 11.0.13, OpenJDK 64-Bit Server VM, 11.0.13+8
# VM invoker: /usr/lib/jvm/java-11-openjdk-11.0.13.0.8-2.fc34.x86_64/bin/java
# VM options: <none>
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: <none>
# Measurement: 1 iterations, single-shot each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: org.jerboaa.KrbTicketBenchmark.jdk17CompatibleApi

# Run progress: 100.00% complete, ETA 00:00:00
# Fork: 1 of 1
Iteration   1: 39400.047 us/op



# Run complete. Total time: 00:05:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                              Mode  Cnt      Score   Error  Units
KrbTicketBenchmark.baseLine            avgt    5      0.002 ± 0.001  us/op
KrbTicketBenchmark.internalJDKApi      avgt    5      2.700 ± 0.583  us/op
KrbTicketBenchmark.jdk17CompatibleApi  avgt    5     22.364 ± 0.679  us/op
KrbTicketBenchmark.baseLine              ss           7.826          us/op
KrbTicketBenchmark.internalJDKApi        ss       26258.217          us/op
KrbTicketBenchmark.jdk17CompatibleApi    ss       39400.047          us/op

